
/* Данный SCSS файл предназначен для визуализации и анимации перехода кругов
*  в различимые буквы H, I, T. Изначально разработан для Лабораторной №2 дисциплины Web-программирование,
*  изучаемая в "НИУ ИТМО" г. Санкт-Петербург, 2025
*/

// ===== Переменные визуализации =====
$stage-bg: #f5f5f7;
$circle-color: #000;
$circle-size: 360px;
$handle-size: 30px;
$eraser-color: $stage-bg;

// Переменная при переключении на TRUE создает границы стиралок
$debug-handles: false;

// ===== Переменные анимации =====
$dur-circle: 0.2s;   // длительность перехода из круга в квадрат (для черных кругов)
$dur-grow: 1.1s;     // длительность роста стиралок
$dur-square: 0.8s;   // длительность преобразования стиралок в квадрат
$dur-handle: 1.0s;   // длительность задержки анимации стиралок
$ease: cubic-bezier(.4, .0, 0.2, 1); // Кривая Бейзера для кастомной плавности анимации
$t-bar-top: 75%; // переменная расположения hadnlerов для буквы T
$t-scale-x: 7;      // растяжение стиралок по оси X (создание основы буквы T)
$t-scale-y: 10.7;    // растяжение стиралок по оси Y (создание основы буквы T)
$t-corner-start: 6px; // начальное скругление стиралок буквы T

// ===== Внешняя сцена =====
*,
*::before,
*::after { box-sizing: border-box; }

html, body { height: 100%; }

/* Важно! Цвет любых стиралок и background должен быть
*  одинаковым, иначе не будет достигнут эффект "букв" */
body {
  margin: 0;
  font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
  background: $stage-bg;
  color: #111;
}

// ===== Внутренняя сцена - основной блок контента =====
.stage {
  min-height: 100dvh;
  display: grid;
  place-items: center;
  gap: 24px;
  padding: 24px;
  background: $stage-bg;
}

.stage { --eraser: #{$stage-bg}; } // Цвет стиралок для буквы T

.word {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
  gap: 32px; /* расстояние между кругами */
  align-items: center;
}

// ===== Круги из которых образуются буквы =====
.circle {
  width: $circle-size;
  height: $circle-size;
  background: $circle-color;
  border-radius: 50%;
  position: relative;
  overflow: hidden;

  &--t{}
}

.t-handles {
  position: absolute;
  inset: 0;      // растянуть SVG по кругу
  width: 100%;
  height: 100%;
  display: block;
}

.t-rect {
  fill: var(--eraser);
  /* ниже — чтобы трансформации были предсказуемыми */
  transform-box: fill-box;
  transform-origin: 50% 50%;

  &--left{
    transform-origin: 100% 50%;
  }

  &--right{
    transform-origin:   0 50%;
  }
}

// ===== Стиралки =====
.handle {
  width: $handle-size;
  height: $handle-size;
  background: $eraser-color;
  border-radius: 50%;
  position: absolute;
  transform: translate(-50%, -50%) scale(1);
  will-change: transform, border-radius;

  &--top {
    top: 10dvh; left: 50%;
    transform-origin: 50% 100%;
  }

  &--bottom {
    bottom: 10dvh; left: 50%;
    transform-origin: 50% 0;
    transform: translate(-50%, 50%) scale(1);
  }

  &--left{
    left: 10dvh; top: 50%;
    transform: translate(-50%, -50%) scale(1);
    transform-origin: 100% 50%; /* якорь справа — растёт влево при будущем scale */
  }

  &--right{
    right: 10dvh; top: 50%;
    transform: translate(50%, -50%) scale(1);
    transform-origin: 0 50%; /* якорь слева — растёт вправо при будущем scale */
  }

  &--t-left{
    /* отступ от левого края круга, как и в «I» — оставляю твои 10dvh */
    left: 10dvh;
    /* вертикальное положение полосы T */
    top: $t-bar-top;
    /* центрируем кружок относительно точки */
    transform: translate(-50%, -50%) scale(1);
    /* якорим масштаб к правому краю, чтобы расти вправо/влево корректно в анимации */
    transform-origin: 100% 50%;
  }

  &--t-right{
    right: 10dvh;
    top: $t-bar-top;
    transform: translate(50%, -50%) scale(1);
    transform-origin: 0 50%;
  }
}

// ===== Ключи анимаций =====
@keyframes circle-to-square {
  from { border-radius: 50%; }
  to   { border-radius: 0; }
}

@keyframes handle-grow-top {
  from { transform: translate(-50%, -50%) scale(1); }
  to   { transform: translate(-50%, -60%) scale(6.2); }
}

@keyframes handle-grow-bottom {
  from { transform: translate(-50%, 50%) scale(1); }
  to   { transform: translate(-50%, 60%) scale(6.2); }
}

@keyframes handle-to-square {
  from { border-radius: 50%; }
  to   { border-radius: 0; }
}

@keyframes handle-grow-left {
  from { transform: translate(-50%, -50%) scale(1,1); }
  to   { transform: translate(-10%, -50%) scale(6.2, 6.2); } // смещение влево + масштаб
}
@keyframes handle-grow-right {
  from { transform: translate(50%, -50%) scale(1,1); }
  to   { transform: translate(10%, -50%) scale(6.2, 6.2); }  // смещение вправо + масштаб
}

/* рост: «круглый прямоугольник» увеличивается равномерно (векторно, без мыла, костыль для T) */
@keyframes t-grow-svg {
  from { transform: scale(1, 1); }
  to   { transform: scale(#{$t-scale-x}, #{$t-scale-y}); }
}

/* скруглённые углы -> прямоугольные (в пикселях, чтобы IDE не ругался) */
@keyframes t-round-to-rect {
  from { rx: $t-corner-start; }
  to   { rx: 0; }
}

@keyframes t-grow-x {
  from { transform: scale(1, 1); }
  to   { transform: scale(#{$t-scale-x}, #{$t-scale-y}); }
}

// ===== Анимашечка =====
.stage.is-playing {
  .circle--h {
    animation: circle-to-square ($dur-circle+1s) $ease forwards;

    .handle--top {
      animation:
              handle-grow-top   $dur-grow   $ease forwards,
              handle-to-square  $dur-square $ease forwards;
      animation-delay: $dur-handle, ($dur-handle);
    }
    .handle--bottom {
      animation:
              handle-grow-bottom $dur-grow   $ease forwards,
              handle-to-square   $dur-square $ease forwards;
      animation-delay: $dur-handle, ($dur-handle);
    }
  }
  .circle--i {
    animation: circle-to-square ($dur-circle+1s) $ease forwards;

    .handle--left {
      animation:
              handle-grow-left  $dur-grow   $ease forwards,
              handle-to-square  $dur-square $ease forwards;
      animation-delay: $dur-handle, ($dur-handle);
    }

    .handle--right {
      animation:
              handle-grow-right $dur-grow   $ease forwards,
              handle-to-square  $dur-square $ease forwards;
      animation-delay: $dur-handle, ($dur-handle);
    }
  }
  .circle--t {
    animation: circle-to-square ($dur-circle+1s) $ease forwards;

    .t-rect--left,
    .t-rect--right {
      animation:
              t-grow-x        $dur-grow   $ease forwards,
              t-round-to-rect $dur-square $ease forwards;
      animation-delay: $dur-handle, ($dur-handle);
    }
  }
}

// ===== адаптив для малых экранов =====
@media (max-width: 480px) {
  $circle-size: 260px !global;
  $handle-size: 22px !global;
  .circle { width: $circle-size; height: $circle-size; }
  .handle { width: $handle-size; height: $handle-size; }
}
